{"version":3,"sources":["../../src/entities/modelParser.js"],"names":["ParseForCreate","title","description","ReturnData","Todo","ParseForReplace","id","todo","catch","err","then","val","data","Logger","consoleLog","ParseForUpdate","ActionEnum","ModelParser","action","modelParser"],"mappings":"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","file":"modelParser.js","sourcesContent":["import { GetById } from '../data/todoRepo'\r\nimport Logger from '../helper/logger'\r\nimport Todo from '../entities/todo'\r\nimport ReturnData from '../dataTypes/returnData'\r\n\r\nconst ParseForCreate = async (title, description) => {\r\n  // All fields, besides the id, must be present for the creation of a Todo\r\n  if (!title) return new ReturnData(false)\r\n  if (!description) return new ReturnData(false)\r\n\r\n  return new ReturnData(true, new Todo(null, title, description))\r\n}\r\n\r\nconst ParseForReplace = async (id, title, description) => {\r\n  if (!id) return new ReturnData(false)\r\n\r\n  try {\r\n    let todo\r\n    await GetById(id)\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        todo = val.data\r\n      })\r\n\r\n    // Check if the Todo exists\r\n    if (!todo) return new ReturnData(false)\r\n\r\n    // All fields must be present in order to do a PUT operation\r\n    if (!title) return new ReturnData(false)\r\n    if (!description) return new ReturnData(false)\r\n\r\n    return new ReturnData(true, new Todo(id, title, description))\r\n  } catch (err) {\r\n    Logger.consoleLog('Error occured while parsing a model for a replace operation', err)\r\n    return new ReturnData(false, null, err)\r\n  }\r\n}\r\n\r\nconst ParseForUpdate = async (id, title, description) => {\r\n  if (!id) return new ReturnData(false)\r\n\r\n  try {\r\n    let todo\r\n    await GetById(id)\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        todo = val.data\r\n      })\r\n\r\n    // Check if the Todo exists\r\n    if (!todo) return new ReturnData(false)\r\n\r\n    /*\r\n    // If nothing entered in the title or\r\n    // description fields, maintain previous value\r\n    */\r\n    title = title || todo.title\r\n    description = description || todo.description\r\n\r\n    return new ReturnData(true, new Todo(id, title, description))\r\n  } catch (err) {\r\n    Logger.consoleLog('Error occured while parsing a model for a update operation', err)\r\n    return new ReturnData(false, null, err)\r\n  }\r\n}\r\n\r\nexport const ActionEnum = {\r\n  'GET': 1,\r\n  'POST': 2,\r\n  'PUT': 3,\r\n  'PATCH': 4,\r\n  'DELETE': 5\r\n}\r\n\r\nclass ModelParser {\r\n  ParseTodoModel (action, { id, title, description }) {\r\n    switch (action) {\r\n      case 2:\r\n        return ParseForCreate(title, description)\r\n\r\n      case 3:\r\n        return ParseForReplace(id, title, description)\r\n\r\n      case 4:\r\n        return ParseForUpdate(id, title, description)\r\n\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n}\r\n\r\nexport const modelParser = new ModelParser()\r\n"]}