{"version":3,"sources":["../../src/controllers/todoController.js"],"names":["TodosController","req","res","then","val","success","status","send","message","data","map","ModelFactory","CreateTodoModel","todo","params","id","body","title","description","returnData","modelParser","ParseTodoModel","ActionEnum","POST","PATCH","PUT","todoController"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;;;IAEMA,e;;;;;;;sCACeC,G,EAAKC,G,EAAK;AAC3B,8BACGC,IADH,CACQ,eAAO;AACX,YAAIC,IAAIC,OAAR,EAAiB;AACf,iBAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,qBAAS,IADiB;AAE1BG,qBAAS,mCAFiB;AAG1BC,kBAAML,IAAIK,IAAJ,CAASC,GAAT,CAAa;AAAA,qBAAQC,uBAAaC,eAAb,CAA6BC,IAA7B,CAAR;AAAA,aAAb;AAHoB,WAArB,CAAP;AAKD;AACD,eAAOX,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,mBAAS,KADiB;AAE1BG,mBAAS;AAFiB,SAArB,CAAP;AAID,OAbH;AAcD;;;kCAEcP,G,EAAKC,G,EAAK;AACvB,6BAAQD,IAAIa,MAAJ,CAAWC,EAAnB,EACGZ,IADH,CACQ,eAAO;AACX,YAAIC,IAAIC,OAAR,EAAiB;AACf,iBAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,qBAAS,IADiB;AAE1BG,qBAAS,iCAFiB;AAG1BC,kBAAME,uBAAaC,eAAb,CAA6BR,IAAIK,IAAjC;AAHoB,WAArB,CAAP;AAKD;AACD,eAAOP,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,mBAAS,KADiB;AAE1BG,mBAAS;AAFiB,SAArB,CAAP;AAID,OAbH;AAcD;;;qCAEiBP,G,EAAKC,G,EAAK;AAC1B,UAAI,CAACD,IAAIe,IAAJ,CAASC,KAAd,EAAqB;AACnB,eAAOf,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,mBAAS,KADiB;AAE1BG,mBAAS;AAFiB,SAArB,CAAP;AAID;;AAED,UAAI,CAACP,IAAIe,IAAJ,CAASE,WAAd,EAA2B;AACzB,eAAOhB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,mBAAS,KADiB;AAE1BG,mBAAS;AAFiB,SAArB,CAAP;AAID;;AAED,UAAMW,aAAa,MAAMC,yBAAYC,cAAZ,CACvBC,wBAAWC,IADY,EAEvB;AACE,cAAMtB,IAAIa,MAAJ,CAAWC,EADnB;AAEE,iBAASd,IAAIe,IAAJ,CAASC,KAFpB;AAGE,uBAAehB,IAAIe,IAAJ,CAASE;AAH1B,OAFuB,EAOtBf,IAPsB,CAOjB,eAAO;AACX,eAAOC,GAAP;AACD,OATsB,CAAzB;;AAWA,UAAI,CAACe,WAAWd,OAAhB,EAAyB;AACvB,eAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,mBAAS,KADiB;AAE1BG,mBAAS;AAFiB,SAArB,CAAP;AAID;;AAED,gCAAWW,WAAWV,IAAtB,EACGN,IADH,CACQ,eAAO;AACX,YAAIC,IAAIC,OAAR,EAAiB;AACf,iBAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,qBAAS,IADiB;AAE1BG,qBAAS,2BAFiB;AAG1BC,kBAAME,uBAAaC,eAAb,CAA6BR,IAAIK,IAAjC;AAHoB,WAArB,CAAP;AAKD;AACD,eAAOP,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,mBAAS,KADiB;AAE1BG,mBAAS;AAFiB,SAArB,CAAP;AAID,OAbH;AAcD;;;qCAEiBP,G,EAAKC,G,EAAK;AAC1B,UAAMiB,aAAa,MAAMC,yBAAYC,cAAZ,CACvBC,wBAAWE,KADY,EAEvB;AACET,YAAId,IAAIa,MAAJ,CAAWC,EADjB;AAEEE,eAAOhB,IAAIe,IAAJ,CAASC,KAFlB;AAGEC,qBAAajB,IAAIe,IAAJ,CAASE;AAHxB,OAFuB,EAOtBf,IAPsB,CAOjB,eAAO;AACX,eAAOC,GAAP;AACD,OATsB,CAAzB;;AAWA,UAAI,CAACe,WAAWd,OAAhB,EAAyB;AACvB,eAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,mBAAS,KADiB;AAE1BG,mBAAS;AAFiB,SAArB,CAAP;AAID;;AAED,gCAAWW,WAAWV,IAAtB,EACGN,IADH,CACQ,eAAO;AACX,YAAIC,IAAIC,OAAR,EAAiB;AACf,iBAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,qBAAS,IADiB;AAE1BG,qBAAS;AAFiB,WAArB,CAAP;AAID;AACD,eAAON,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,mBAAS,KADiB;AAE1BG,mBAAS;AAFiB,SAArB,CAAP;AAID,OAZH;AAaD;;;sCAEkBP,G,EAAKC,G,EAAK;AAC3B,UAAMiB,aAAa,MAAMC,yBAAYC,cAAZ,CACvBC,wBAAWG,GADY,EAEvB;AACE,cAAMxB,IAAIa,MAAJ,CAAWC,EADnB;AAEE,iBAASd,IAAIe,IAAJ,CAASC,KAFpB;AAGE,uBAAehB,IAAIe,IAAJ,CAASE;AAH1B,OAFuB,EAOtBf,IAPsB,CAOjB,eAAO;AACX,eAAOC,GAAP;AACD,OATsB,CAAzB;;AAWA,UAAI,CAACe,WAAWd,OAAhB,EAAyB;AACvB,eAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,mBAAS,KADiB;AAE1BG,mBAAS;AAFiB,SAArB,CAAP;AAID;;AAED,gCAAWW,WAAWV,IAAtB,EACGN,IADH,CACQ,eAAO;AACX,YAAIC,IAAIC,OAAR,EAAiB;AACf,iBAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,qBAAS,IADiB;AAE1BG,qBAAS;AAFiB,WAArB,CAAP;AAID;AACD,eAAON,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,mBAAS,KADiB;AAE1BG,mBAAS;AAFiB,SAArB,CAAP;AAID,OAZH;AAaD;;;qCAEiBP,G,EAAKC,G,EAAK;AAC1B,gCAAWD,IAAIa,MAAJ,CAAWC,EAAtB,EACGZ,IADH,CACQ,eAAO;AACX,YAAIC,IAAIC,OAAR,EAAiB;AACf,iBAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,qBAAS,IADiB;AAE1BG,qBAAS;AAFiB,WAArB,CAAP;AAID;AACD,eAAON,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,mBAAS,KADiB;AAE1BG,mBAAS;AAFiB,SAArB,CAAP;AAID,OAZH;AAaD;;;;;;AAGH,IAAMkB,iBAAiB,IAAI1B,eAAJ,EAAvB;kBACe0B,c","file":"todoController.js","sourcesContent":["import { GetAll, GetById, CreateTodo, UpdateTodo, DeleteTodo } from '../data/todoRepo'\r\nimport ModelFactory from '../models/modelFactory'\r\nimport { modelParser, ActionEnum } from '../entities/modelParser'\r\n\r\nclass TodosController {\r\n  async getAllTodos (req, res) {\r\n    GetAll()\r\n      .then(val => {\r\n        if (val.success) {\r\n          return res.status(200).send({\r\n            success: true,\r\n            message: 'Todos were retrieved successfully',\r\n            data: val.data.map(todo => ModelFactory.CreateTodoModel(todo))\r\n          })\r\n        }\r\n        return res.status(404).send({\r\n          success: false,\r\n          message: 'No Todos were found'\r\n        })\r\n      })\r\n  }\r\n\r\n  async getTodo (req, res) {\r\n    GetById(req.params.id)\r\n      .then(val => {\r\n        if (val.success) {\r\n          return res.status(200).send({\r\n            success: true,\r\n            message: 'Todo was retrieved successfully',\r\n            data: ModelFactory.CreateTodoModel(val.data)\r\n          })\r\n        }\r\n        return res.status(404).send({\r\n          success: false,\r\n          message: 'Todo does not exist'\r\n        })\r\n      })\r\n  }\r\n\r\n  async createTodo (req, res) {\r\n    if (!req.body.title) {\r\n      return res.status(400).send({\r\n        success: false,\r\n        message: 'Title is required'\r\n      })\r\n    }\r\n\r\n    if (!req.body.description) {\r\n      return res.status(400).send({\r\n        success: false,\r\n        message: 'Description is required'\r\n      })\r\n    }\r\n\r\n    const returnData = await modelParser.ParseTodoModel(\r\n      ActionEnum.POST,\r\n      {\r\n        'id': req.params.id,\r\n        'title': req.body.title,\r\n        'description': req.body.description\r\n      })\r\n      .then(val => {\r\n        return val\r\n      })\r\n\r\n    if (!returnData.success) {\r\n      return res.status(400).send({\r\n        success: false,\r\n        message: 'Provided information is incorrect'\r\n      })\r\n    }\r\n\r\n    CreateTodo(returnData.data)\r\n      .then(val => {\r\n        if (val.success) {\r\n          return res.status(201).send({\r\n            success: true,\r\n            message: 'Todo created successfully',\r\n            data: ModelFactory.CreateTodoModel(val.data)\r\n          })\r\n        }\r\n        return res.status(400).send({\r\n          success: false,\r\n          message: 'Failed to create a new Todo'\r\n        })\r\n      })\r\n  }\r\n\r\n  async updateTodo (req, res) {\r\n    const returnData = await modelParser.ParseTodoModel(\r\n      ActionEnum.PATCH,\r\n      {\r\n        id: req.params.id,\r\n        title: req.body.title,\r\n        description: req.body.description\r\n      })\r\n      .then(val => {\r\n        return val\r\n      })\r\n\r\n    if (!returnData.success) {\r\n      return res.status(400).send({\r\n        success: false,\r\n        message: 'Provided information is incorrect'\r\n      })\r\n    }\r\n\r\n    UpdateTodo(returnData.data)\r\n      .then(val => {\r\n        if (val.success) {\r\n          return res.status(204).send({\r\n            success: true,\r\n            message: 'Todo updated successfully'\r\n          })\r\n        }\r\n        return res.status(400).send({\r\n          success: false,\r\n          message: 'Failed to update the Todo'\r\n        })\r\n      })\r\n  }\r\n\r\n  async replaceTodo (req, res) {\r\n    const returnData = await modelParser.ParseTodoModel(\r\n      ActionEnum.PUT,\r\n      {\r\n        'id': req.params.id,\r\n        'title': req.body.title,\r\n        'description': req.body.description\r\n      })\r\n      .then(val => {\r\n        return val\r\n      })\r\n\r\n    if (!returnData.success) {\r\n      return res.status(400).send({\r\n        success: false,\r\n        message: 'Provided information is incorrect'\r\n      })\r\n    }\r\n\r\n    UpdateTodo(returnData.data)\r\n      .then(val => {\r\n        if (val.success) {\r\n          return res.status(204).send({\r\n            success: true,\r\n            message: 'Todo updated successfully'\r\n          })\r\n        }\r\n        return res.status(400).send({\r\n          success: false,\r\n          message: 'Failed to update the Todo'\r\n        })\r\n      })\r\n  }\r\n\r\n  async deleteTodo (req, res) {\r\n    DeleteTodo(req.params.id)\r\n      .then(val => {\r\n        if (val.success) {\r\n          return res.status(204).send({\r\n            success: true,\r\n            message: 'Todo was deleted successfully'\r\n          })\r\n        }\r\n        return res.status(404).send({\r\n          success: false,\r\n          message: 'Todo not found'\r\n        })\r\n      })\r\n  }\r\n}\r\n\r\nconst todoController = new TodosController()\r\nexport default todoController\r\n"]}