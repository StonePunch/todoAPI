{"version":3,"sources":["../../src/data/todoRepo.js"],"names":["DBURL","DBNAME","isServerConnected","client","topology","isConnected","connectServer","collectionName","MongoClient","connect","useNewUrlParser","catch","err","then","val","db","collection","ReturnData","close","Logger","consoleLog","GetAll","data","todos","find","toArray","length","map","Todo","todo","_id","toHexString","title","description","GetById","id","findOne","ObjectID","CreateTodo","insertOne","insertedId","UpdateTodo","updatedCount","updateOne","$set","result","n","DeleteTodo","deleteOne"],"mappings":"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","file":"todoRepo.js","sourcesContent":["import { MongoClient, ObjectID } from 'mongodb'\r\nimport Logger from '../helper/logger'\r\nimport Todo from '../entities/todo'\r\nimport ReturnData from '../dataTypes/returnData'\r\n\r\nconst DBURL = 'mongodb://localhost:27017'\r\nconst DBNAME = 'todos'\r\n\r\n// Check if the connection to the db is open\r\nconst isServerConnected = (client) => {\r\n  return !!client && !!client.topology && client.topology.isConnected()\r\n}\r\n\r\n// Open the connection to the server\r\nconst connectServer = async (collectionName) => {\r\n  let client\r\n  try {\r\n    // Connect to the db\r\n    client = await MongoClient.connect(`${DBURL}/${DBNAME}`, { useNewUrlParser: true })\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        return val\r\n      })\r\n\r\n    const db = client.db(DBNAME)\r\n    const collection = db.collection(collectionName)\r\n\r\n    return new ReturnData(true, { client, collection, db })\r\n  } catch (err) {\r\n    // Make sure the connection to the db is closed\r\n    if (isServerConnected(client)) client.close()\r\n\r\n    Logger.consoleLog(\r\n      `Error occured while creating a connection to the server`,\r\n      err\r\n    )\r\n    return new ReturnData(false, null, err)\r\n  }\r\n}\r\n\r\nexport const GetAll = async () => {\r\n  let client, collection\r\n  try {\r\n    ({ client, collection } = await connectServer('todo')\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        return val.data\r\n      })\r\n    )\r\n\r\n    // Retrieve the first Todo that matches the filter\r\n    let todos = await collection.find({}).toArray()\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        return val\r\n      })\r\n\r\n    client.close()\r\n\r\n    if (!todos.length) return new ReturnData(false)\r\n\r\n    todos = todos.map(todo =>\r\n      new Todo(todo._id.toHexString(), todo.title, todo.description)\r\n    )\r\n\r\n    Logger.consoleLog(`Found ${todos.length} Todos`)\r\n    return new ReturnData(true, todos)\r\n  } catch (err) {\r\n    // Make sure the connection to the db is closed\r\n    if (isServerConnected(client)) client.close()\r\n\r\n    Logger.consoleLog('Error occured while executing GetAll', err)\r\n    return new ReturnData(false, null, err)\r\n  }\r\n}\r\n\r\nexport const GetById = async (id) => {\r\n  if (!id) return new ReturnData(false)\r\n\r\n  let client, collection\r\n  try {\r\n    ({ client, collection } = await connectServer('todo')\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        return val.data\r\n      })\r\n    )\r\n\r\n    // Retrieve the first Todo that matches the filter\r\n    const todo = await collection.findOne({ '_id': new ObjectID(id) })\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        return new Todo(val._id.toHexString(), val.title, val.description)\r\n      })\r\n\r\n    client.close()\r\n\r\n    if (!todo) return new ReturnData(false)\r\n\r\n    Logger.consoleLog('Found requested Todo')\r\n    return new ReturnData(true, todo)\r\n  } catch (err) {\r\n    // Make sure the connection to the db is closed\r\n    if (isServerConnected(client)) client.close()\r\n\r\n    Logger.consoleLog('Error occured while executing GetById', err)\r\n    return new ReturnData(false, null, err)\r\n  }\r\n}\r\n\r\nexport const CreateTodo = async ({ title, description }) => {\r\n  if (!title || !description) return new ReturnData(false)\r\n\r\n  let client, collection\r\n  try {\r\n    ({ client, collection } = await connectServer('todo')\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        return val.data\r\n      })\r\n    )\r\n\r\n    const todo = await collection.insertOne({ title, description })\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        return new Todo(val.insertedId.toHexString(), title, description)\r\n      })\r\n\r\n    client.close()\r\n\r\n    if (!todo) return new ReturnData(false)\r\n\r\n    Logger.consoleLog('New Todo has been inserted')\r\n\r\n    return new ReturnData(true, todo)\r\n  } catch (err) {\r\n    // Make sure the connection to the db is closed\r\n    if (isServerConnected(client)) client.close()\r\n\r\n    Logger.consoleLog('Error occured while executing CreateTodo', err)\r\n    return new ReturnData(false, null, err)\r\n  }\r\n}\r\n\r\nexport const UpdateTodo = async ({ id, title, description }) => {\r\n  if (!id) return new ReturnData(false)\r\n\r\n  // Avoiding nulls in the db\r\n  if (title == null) title = ''\r\n  if (description == null) description = ''\r\n\r\n  let client, collection\r\n  try {\r\n    ({ client, collection } = await connectServer('todo')\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        return val.data\r\n      })\r\n    )\r\n\r\n    const updatedCount = await collection.updateOne({ '_id': new ObjectID(id) },\r\n      { $set: { title: title, description: description } })\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        return val.result.n\r\n      })\r\n\r\n    client.close()\r\n\r\n    if (!updatedCount) return new ReturnData(false)\r\n\r\n    Logger.consoleLog('Updated Todo')\r\n\r\n    return new ReturnData(true)\r\n  } catch (err) {\r\n    // Make sure the connection to the db is closed\r\n    if (isServerConnected(client)) client.close()\r\n\r\n    Logger.consoleLog('Error occured while executing UpdateTodo', err)\r\n    return new ReturnData(false, null, err)\r\n  }\r\n}\r\n\r\nexport const DeleteTodo = async (id) => {\r\n  if (!id) return new ReturnData(false)\r\n\r\n  let client, collection\r\n  try {\r\n    ({ client, collection } = await connectServer('todo')\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        return val.data\r\n      })\r\n    )\r\n\r\n    const updatedCount = await collection.deleteOne({ '_id': new ObjectID(id) })\r\n      .catch(err => {\r\n        throw err\r\n      })\r\n      .then(val => {\r\n        return val.result.n\r\n      })\r\n\r\n    // TODO: Check why Promise.prototype.finally() is not working\r\n    client.close()\r\n\r\n    if (!updatedCount) return new ReturnData(false)\r\n\r\n    Logger.consoleLog('Deleted Todo')\r\n\r\n    return new ReturnData(true)\r\n  } catch (err) {\r\n    // Make sure the connection to the db is closed\r\n    if (isServerConnected(client)) client.close()\r\n\r\n    Logger.consoleLog('Error occured while executing DeleteTodo', err)\r\n    return new ReturnData(false, null, err)\r\n  }\r\n}\r\n"]}